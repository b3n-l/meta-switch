From 33554d554bdbf79539620bd7b94f91c4bc978ee0 Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Mon, 5 Oct 2020 10:31:13 +0200
Subject: [PATCH 1/2] route/link: expose IFLA_EVENT

Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 include/netlink-private/types.h |  1 +
 include/netlink/route/link.h    |  3 +++
 lib/route/link.c                | 21 +++++++++++++++++++++
 libnl-route-3.sym               |  2 ++
 4 files changed, 27 insertions(+)

diff --git a/include/netlink-private/types.h b/include/netlink-private/types.h
index 92facac..94ae4e7 100644
--- a/include/netlink-private/types.h
+++ b/include/netlink-private/types.h
@@ -230,6 +230,7 @@ struct rtnl_link
 	int				l_ns_fd;
 	pid_t				l_ns_pid;
 	struct rtnl_link_vf *		l_vf_list;
+	uint32_t			l_event;
 };
 
 struct rtnl_ncacheinfo
diff --git a/include/netlink/route/link.h b/include/netlink/route/link.h
index add464b..d3c5a6d 100644
--- a/include/netlink/route/link.h
+++ b/include/netlink/route/link.h
@@ -245,6 +245,9 @@ extern int      rtnl_link_get_ns_fd(struct rtnl_link *);
 extern void	rtnl_link_set_ns_pid(struct rtnl_link *, pid_t);
 extern pid_t	rtnl_link_get_ns_pid(struct rtnl_link *);
 
+extern void	rtnl_link_set_event(struct rtnl_link *, uint32_t);
+extern uint32_t	rtnl_link_get_event(struct rtnl_link *);
+
 extern int	rtnl_link_enslave_ifindex(struct nl_sock *, int, int);
 extern int	rtnl_link_enslave(struct nl_sock *, struct rtnl_link *,
                                   struct rtnl_link *);
diff --git a/lib/route/link.c b/lib/route/link.c
index 9733f51..1f0e028 100644
--- a/lib/route/link.c
+++ b/lib/route/link.c
@@ -66,6 +66,7 @@
 #define LINK_ATTR_GSO_MAX_SEGS		((uint64_t) 1 << 37)
 #define LINK_ATTR_GSO_MAX_SIZE		((uint64_t) 1 << 38)
 #define LINK_ATTR_LINKINFO_SLAVE_KIND	((uint64_t) 1 << 39)
+#define LINK_ATTR_EVENT			((uint64_t) 1 << 40)
 
 static struct nl_cache_ops rtnl_link_ops;
 static struct nl_object_ops link_obj_ops;
@@ -363,6 +364,7 @@ struct nla_policy rtln_link_policy[IFLA_MAX+1] = {
 	[IFLA_PHYS_SWITCH_ID]	= { .type = NLA_UNSPEC },
 	[IFLA_NET_NS_PID]	= { .type = NLA_U32 },
 	[IFLA_NET_NS_FD]	= { .type = NLA_U32 },
+	[IFLA_EVENT]		= { .type = NLA_U32 },
 };
 
 static struct nla_policy link_info_policy[IFLA_INFO_MAX+1] = {
@@ -564,6 +566,11 @@ int rtnl_link_info_parse(struct rtnl_link *link, struct nlattr **tb)
 		link->ce_mask |= LINK_ATTR_NS_PID;
 	}
 
+	if (tb[IFLA_EVENT]) {
+		link->l_event = nla_get_u32(tb[IFLA_EVENT]);
+		link->ce_mask |= LINK_ATTR_EVENT;
+	}
+
 	return 0;
 }
 
@@ -1170,6 +1177,7 @@ static const struct trans_tbl link_attrs[] = {
 	__ADD(LINK_ATTR_NS_FD, ns_fd),
 	__ADD(LINK_ATTR_NS_PID, ns_pid),
 	__ADD(LINK_ATTR_LINK_NETNSID, link_netnsid),
+	__ADD(LINK_ATTR_EVENT, event),
 };
 
 static char *link_attrs2str(int attrs, char *buf, size_t len)
@@ -1535,6 +1543,8 @@ int rtnl_link_fill_info(struct nl_msg *msg, struct rtnl_link *link)
 	if (link->ce_mask & LINK_ATTR_NS_PID)
 		NLA_PUT_U32(msg, IFLA_NET_NS_PID, link->l_ns_pid);
 
+	if (link->ce_mask & LINK_ATTR_EVENT)
+		NLA_PUT_U32(msg, IFLA_EVENT, link->l_event);
 	return 0;
 
 nla_put_failure:
@@ -2787,6 +2797,17 @@ pid_t rtnl_link_get_ns_pid(struct rtnl_link *link)
 	return link->l_ns_pid;
 }
 
+void rtnl_link_set_event(struct rtnl_link *link, uint32_t event)
+{
+	link->l_event = event;
+	link->ce_mask |= LINK_ATTR_EVENT;
+}
+
+uint32_t rtnl_link_get_event(struct rtnl_link *link)
+{
+	return link->l_event;
+}
+
 /** @} */
 
 /**
diff --git a/libnl-route-3.sym b/libnl-route-3.sym
index 4a65503..af5c172 100644
--- a/libnl-route-3.sym
+++ b/libnl-route-3.sym
@@ -286,6 +286,7 @@ global:
 	rtnl_link_get_broadcast;
 	rtnl_link_get_by_name;
 	rtnl_link_get_carrier;
+	rtnl_link_get_event;
 	rtnl_link_get_family;
 	rtnl_link_get_flags;
 	rtnl_link_get_group;
@@ -416,6 +417,7 @@ global:
 	rtnl_link_set_arptype;
 	rtnl_link_set_broadcast;
 	rtnl_link_set_carrier;
+	rtnl_link_set_event;
 	rtnl_link_set_family;
 	rtnl_link_set_flags;
 	rtnl_link_set_group;
-- 
2.28.0

