From 9e225c9e3670cbc335c6a8c9a68e9b334f0e624e Mon Sep 17 00:00:00 2001
From: whitespace <nobody@nobody>
Date: Wed, 7 Oct 2020 17:22:26 -0400
Subject: [PATCH 1/4] *: reformat python files

We are now using black.

[jonas.gorski: limit to generate_support_bundle.py to make later patches
to it apply]
Signed-off-by: Quentin Young <qlyoung@nvidia.com>
---
 tools/generate_support_bundle.py | 153 ++++++++++++++++---------------
 1 file changed, 80 insertions(+), 73 deletions(-)

diff --git a/tools/generate_support_bundle.py b/tools/generate_support_bundle.py
index 540b7a135..ae258bddf 100755
--- a/tools/generate_support_bundle.py
+++ b/tools/generate_support_bundle.py
@@ -7,9 +7,9 @@ import os
 import subprocess
 import datetime
 
-TOOLS_DIR="tools/"
-ETC_DIR="/etc/frr/"
-LOG_DIR="/var/log/frr/"
+TOOLS_DIR = "tools/"
+ETC_DIR = "/etc/frr/"
+LOG_DIR = "/var/log/frr/"
 SUCCESS = 1
 FAIL = 0
 
@@ -17,96 +17,103 @@ inputFile = ETC_DIR + "support_bundle_commands.conf"
 
 # Open support bundle configuration file
 def openConfFile(i_file):
-  try:
-    with open(i_file) as supportBundleConfFile:
-      lines = filter(None, (line.rstrip() for line in supportBundleConfFile))
-    return lines
-  except IOError:
-    return ([])
+    try:
+        with open(i_file) as supportBundleConfFile:
+            lines = filter(None, (line.rstrip() for line in supportBundleConfFile))
+        return lines
+    except IOError:
+        return []
+
 
 # Create the output file name
 def createOutputFile(procName):
-  fileName = procName + "_support_bundle.log"
-  oldFile = LOG_DIR + fileName
-  cpFileCmd = "cp " + oldFile + " " + oldFile + ".prev"
-  rmFileCmd = "rm -rf " + oldFile
-  print("Making backup of " + oldFile)
-  os.system(cpFileCmd)
-  print("Removing " + oldFile)
-  os.system(rmFileCmd)
-  return fileName
+    fileName = procName + "_support_bundle.log"
+    oldFile = LOG_DIR + fileName
+    cpFileCmd = "cp " + oldFile + " " + oldFile + ".prev"
+    rmFileCmd = "rm -rf " + oldFile
+    print("Making backup of " + oldFile)
+    os.system(cpFileCmd)
+    print("Removing " + oldFile)
+    os.system(rmFileCmd)
+    return fileName
+
 
 # Open the output file for this process
 def openOutputFile(fileName):
-  crt_file_cmd = LOG_DIR + fileName
-  print(crt_file_cmd)
-  try:
-    outputFile = open(crt_file_cmd, "w")
-    return outputFile
-  except IOError:
-    return ()
+    crt_file_cmd = LOG_DIR + fileName
+    print(crt_file_cmd)
+    try:
+        outputFile = open(crt_file_cmd, "w")
+        return outputFile
+    except IOError:
+        return ()
+
 
 # Close the output file for this process
 def closeOutputFile(file):
-  try:
-    file.close()
-    return SUCCESS
-  except IOError:
-    return FAIL
+    try:
+        file.close()
+        return SUCCESS
+    except IOError:
+        return FAIL
+
 
 # Execute the command over vtysh and store in the
 # output file
 def executeCommand(cmd, outputFile):
-  cmd_exec_str = "vtysh -c \"" + cmd + "\" "
-  try:
-    cmd_output = subprocess.check_output(cmd_exec_str, shell=True)
+    cmd_exec_str = 'vtysh -c "' + cmd + '" '
     try:
-      dateTime = datetime.datetime.now()
-      outputFile.write(">>[" + str(dateTime) + "]" + cmd + "\n")
-      outputFile.write(cmd_output)
-      outputFile.write("########################################################\n")
-      outputFile.write('\n')
-    except:
-      print("Writing to ouptut file Failed")
-  except subprocess.CalledProcessError as e:
-    dateTime = datetime.datetime.now()
-    outputFile.write(">>[" + str(dateTime) + "]" + cmd + "\n")
-    outputFile.write(e.output)
-    outputFile.write("########################################################\n")
-    outputFile.write('\n')
-    print("Error:" + e.output)
+        cmd_output = subprocess.check_output(cmd_exec_str, shell=True)
+        try:
+            dateTime = datetime.datetime.now()
+            outputFile.write(">>[" + str(dateTime) + "]" + cmd + "\n")
+            outputFile.write(cmd_output)
+            outputFile.write(
+                "########################################################\n"
+            )
+            outputFile.write("\n")
+        except:
+            print("Writing to ouptut file Failed")
+    except subprocess.CalledProcessError as e:
+        dateTime = datetime.datetime.now()
+        outputFile.write(">>[" + str(dateTime) + "]" + cmd + "\n")
+        outputFile.write(e.output)
+        outputFile.write("########################################################\n")
+        outputFile.write("\n")
+        print("Error:" + e.output)
 
 
 # Process the support bundle configuration file
 # and call appropriate functions
 def processConfFile(lines):
-  for line in lines:
-    if line[0][0] == '#':
-      continue
-    cmd_line = line.split(':')
-    if cmd_line[0] == "PROC_NAME":
-      outputFileName = createOutputFile(cmd_line[1])
-      if outputFileName:
-        print(outputFileName, "created for", cmd_line[1])
-    elif cmd_line[0] == "CMD_LIST_START":
-      outputFile = openOutputFile(outputFileName)
-      if outputFile:
-        print(outputFileName, "opened")
-      else:
-        print(outputFileName, "open failed")
-        return FAIL
-    elif cmd_line[0] == "CMD_LIST_END":
-      if closeOutputFile(outputFile):
-        print(outputFileName, "closed")
-      else:
-        print(outputFileName, "close failed")
-    else:
-      print("Execute:" , cmd_line[0])
-      executeCommand(cmd_line[0], outputFile)
-      
+    for line in lines:
+        if line[0][0] == "#":
+            continue
+        cmd_line = line.split(":")
+        if cmd_line[0] == "PROC_NAME":
+            outputFileName = createOutputFile(cmd_line[1])
+            if outputFileName:
+                print(outputFileName, "created for", cmd_line[1])
+        elif cmd_line[0] == "CMD_LIST_START":
+            outputFile = openOutputFile(outputFileName)
+            if outputFile:
+                print(outputFileName, "opened")
+            else:
+                print(outputFileName, "open failed")
+                return FAIL
+        elif cmd_line[0] == "CMD_LIST_END":
+            if closeOutputFile(outputFile):
+                print(outputFileName, "closed")
+            else:
+                print(outputFileName, "close failed")
+        else:
+            print("Execute:", cmd_line[0])
+            executeCommand(cmd_line[0], outputFile)
+
+
 # Main Function
 lines = openConfFile(inputFile)
 if not lines:
-  print("File support_bundle_commands.conf not present in /etc/frr/ directory")
+    print("File support_bundle_commands.conf not present in /etc/frr/ directory")
 else:
-  processConfFile(lines)
+    processConfFile(lines)
-- 
2.17.1

